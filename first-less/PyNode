使用math时要加  import math(数学)或import cmath(复数)

python中的数学函数:
	abs:返回数字的绝对值
	ceil:返回数字的上入整数
	cmp(x,y):小于返回-1, 等于返回0,大于返回1
	等等.
python中的随机数:
	choice(seq):从序列的元素中随机挑选一个元素
	random():随机生成一个实数,在[0,1)范围内
	seed([x]):改变随机生成数器的种子
	shuffle(lst):将序列所有元素随机排序
	uniform(x,y):随机生成一个实数,在[x,y]范围内

python中的三角函数
	acos(x):反余弦
	asin(x):反正弦
	atan(x):反正切
	atan2(y,x):给定x,y坐标值的反正切值
	cos(x):余弦
	degrees(x):弧度转为角度
	radians(x):角度转为弧度
python数字常量
	pi:圆周率,pai
	e:自然常数

转义字符:
	\续行符,\b退格,\e转义,\r回车,\f换页,
字符串运算:
	+:字符串拼接
	*num:重复输出
	[]:索引字符串(同数组相同,下标从0开始)
	[:]:截取字符串的一部分
	in:成员运算符,字符串包含给定的字符返回TURE
	not in:不包含返回TURE
	r/R:(原始字符串)输出时在特殊字符串前加上可以原样输出

字符串格式化符号:(同C相同)
	%c:格式化字符
	%u:无符号整型
	%o:无符号八进制
	%x:十六进制

字符串的内建函数:
	详情参见教程.

列表(相当于数组)
列表更新:
	使用append()来添加列表项,eg:list.append('Runoob')
列表删除:
	使用del,eg:del list1[2]
列表脚本操作:
	len:求长度
	+:组合(相当于拼接)
	*:重复
	in:检测元素是否存在于列表中
	可以带入for循环:eg  for x in [1,2,3]: print x
列表截取:
	list[2]:列表里第三个元素
	list[-2]:列表里倒数第二个元素
	list[1:]:从第二个元素开始截取
列表函数:
	cmp(list):比较列表元素
	len(list):列表个数
	max(list):返回列表最大值
	min(list):最小值
	list(seq):将元组转为列表
列表方法
	list.append(obj):在列表尾添加新的对象
	list.count(obj):统计出现次数
	list.extend(seq):在列表末尾一次性追加另一个序列的多个值
	list.insert(obj):插入
	list.pop([index=-1]):移除列表的一个元素(默认最后一个),并且返回该元素的值
	list.remove(obj):移除列表中某个值的第一个匹配项
	list.reverse():反向列表元素
	list.sort(cmp=None, key=None, reverse=False):排序


Python元组:
	与列表相似,不同的是元组不能修改
	元组中只包含一个元素时,需要在元素后面加上逗号

访问元组:
	tup[tmp]:索引
修改元组:
	tup1 + tup2: 拼接
删除元组:
	元组中元素不能删除,可以删除整个元组
元组运算符:
	len:求元组个数
	+:连接
	*:复制
	in:是否存在
	for语句
元组截取:
	同列表相同

!!:任意无符号对象,以逗号隔开,默认为元组.

元组内置函数:
	cmp:比较元组元素
	len:求长度
	max:返回最大值
	min:最小值
	tuple(seq):将列表转换为元组


Python字典:
	字典的每个键值对key用冒号分割,每个键值对用逗号分割,格式如下:
	d = {key1: value1, key2: value2}
	key是唯一的,但是value不是.如果一个key有多个value,那么后一个会替换前一个value
	值可以是任意数据类型,但是键必须是不可变的(字符串,数组,元组)

修改字典:
	dict[], 进行修改
删除字典:
	del dict[]:删除条目
	dict.clear():清空所有条目
	del dict:删除字典

字典内置函数方法:
	函数:
		cmp(dict1, dict2):比较元素
		len:计算元素个数
		str:输出字典可打印的字符串表示
		type(variable):返回输入的变量类型
	方法:
		dict.copy:返回一个字典的浅复制
		dict.fromkeys(seq[. val]):创建新字典,seq中的元素做字典的键,val做所有键对应的初始值
		dict.has_key:在就返回TRUE
		popitem():随即返回并删除字典中的一个键值对.
		其他参加课件


函数:
	以def关键字开头,后接标识符名称和圆括号()
	第一行可以使用文档字符串用于存放函数说明
	以冒号开始,并且缩进
	return[表达式]结束函数,不带return相当于返回None

	语法:
	def functionname(parameters):
		"函数文档字符串"
		function_suite
		return[expression]
	参数传递:
		类型属于对象,变量没有类型
		eg:
			a = [1,2,3]
			a = "Runoob"
			第一个是list类型,第二个是String类型,但是a没有类型,仅仅是一个对象的引用

		不可变类型:(string, tuples, num)
				a=5后a=10,是新生成10,让a指向它,5被丢弃,相当于从新生成a
		可变类型:(list, dict)
				从新复制只改变某个元素,但是它本身没动


		函数传参:
			不可变类型:
				相当于值传递(整数,字符串,元组),修改的是另一个复制的对象,不会更改本身的值
			可变类型:
				相当于传址(列表,字典),将其真正传过去

!!:python一切都是对象,严格来说应该说  传不可变对象或者传可变对象

		参数:
		必备参数:
			必须按声明的顺序传参
		关键字参数:
			允许函数调用时参数顺序和声明时不一致(但该有的还必须有)
		缺省参数:
			缺省参数的值没有传入,则被认为是默认值(在函数定义时就要给默认值(在定义的括号内))
		不定长参数:
			语法:
				def functionname([formal_args,], *var_args_tuple):
					"函数开头文档字符串"
					function_suite
					return[expression]

		匿名函数:
			使用lambda创建(主体是表达式)
		语法:
			lambda[arg1[,arg2, .....argn]]:expression



全局变量和局部变量:
	和C相同,但是全局想作用于函数内,需加global


模块:
q
	在.py文件头写入import + 模块名,一个模块只会被导入一次
	from...import:
		从模块中导入一个指定的部分到当前命名空间,只会引入单个
	from...import *:
		把一个模块的所有内容导入到当前命名空间

模块搜索路径:
	1.当前目录
	2.在shell变量PYTHONPATH下的每个目录
	3.Python会查看默认路径./usr/local/lib/python/.

命名空间和作用域:
	局部变量和全局变量重命名,局部变量覆盖全局变量

dir()函数:
	排好序的字符串列表,内容是模块里定义过的名字

globals()和locals()函数:
	都可被用来返回全局和局部命名空间里的名字
	内部调用locals(),返回的是所有能在函数里访问的命名
	内部调用globals(),返回的是所有能在函数里访问的全局名字
	返回类型都是字典,用key()函数摘取

reload():
	当一个模块被导入到一个脚本,代码只执行一次,要想重新执行,可用reload()函数,reload(模块名)


文件I/O:
	读取键盘输入:
			raw_input:读取一行,返回一个字符串
			input:可以接受一个表达式,并返回其结果













